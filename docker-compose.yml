# Specify the version of Docker Compose syntax being used.
version: '3.8'

services:
  # -------------------------------
  # Web server (PHP + Apache)
  # -------------------------------
  web:
    container_name: php_web_app  # Sets a custom name for the web container.
    build: .                     # Builds the Docker image using the Dockerfile in the current directory.
    
    ports:
      - "${APP_PORT}:80"        # Maps host port (from .env) to container port 80. Use http://localhost:${APP_PORT} to access.

    volumes:
      - .:/var/www/html/        # Mounts your current project directory into the container to reflect file changes immediately.

    depends_on:
      db:
        condition: service_healthy  # Wait for the database to be healthy before starting the web server.

    environment:
      # These environment variables are passed into the container to configure the database connection.
      MYSQL_HOST: db
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

    restart: unless-stopped     # Automatically restart unless the container is explicitly stopped.

    networks:
      - my_custom_network       # Connects this service to the custom defined network.

  # -------------------------------
  # MariaDB database service
  # -------------------------------
  db:
    container_name: mariadb_server  # Sets a custom name for the database container.
    image: mariadb:10.6             # Uses the official MariaDB image (version 10.6).

    environment:
      # Set up initial database and user credentials using environment variables.
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

    volumes:
      - db_data:/var/lib/mysql      # Persists database files between container restarts.
      - ./elearn.sql:/docker-entrypoint-initdb.d/elearn.sql  # Initializes the DB with this SQL file on first run.

    healthcheck:
      # Health check to ensure the DB is ready before allowing dependent containers to start.
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

    ports:
      - "${DB_PORT}:3306"           # Maps MariaDB port 3306 in container to DB_PORT on host.

    restart: unless-stopped         # Restart the DB container unless stopped manually.

    networks:
      - my_custom_network           # Connects the DB service to the custom network.

# -------------------------------
# Named volume to persist DB data
# -------------------------------
volumes:
  db_data:                          # This volume stores MariaDB data even if the container is removed.

# -------------------------------
# Custom Docker network
# -------------------------------
networks:
  my_custom_network:                # User-defined bridge network allows clean communication between services.
    driver: bridge                  # Bridge driver is default and suitable for most applications.
